import { ProjectTemplateInterface } from "@/interface/projectTemplateInterface";
//TODO: mention explicitly that I worked with Ryan on this project. Maybe on a link to his github or linkedIn.

export const reactJam23_24WinterProjectTemplate: ProjectTemplateInterface = {
  id: "reactJam23_24Winter",
  summaryList: [
    {
      id: "reactJam23_24Winter-point-1",
      title: "Modular design - React elements",
      content: [
        "I designed the project with modularity in mind.",
        "This meant that the codebase would be able to handle components being slotted in or have sections of code able to be turned into components.",
        "These components allow for a more concise codebase, by sectioning out redundant code found in several pages, the files are then easier to read.",
        "This is taken a step further on this project as it is a game.",
        "Many components are expected to generate several instances of other components per the users request.",
        "For example, several buildings can be bought and made by the user.",
        "A lot of work was put in designing these components to make sure that future updates don't up and break them.",
      ].join(" "),
    },
    {
      id: "reactJam23_24Winter-point-2",
      title: "Data consistency and type checking with Typescript",
      content: [
        "Building off of the previous point, to make a project capable of handling modular functionality then it's data needs to be consistent.",
        "Typescript allows for this, with the type checking and more traditional interfaces, I'm able to format data that if incorrect will not let the app deploy.",
        "For each unique set of data that needs to be passed into a component I can then create a unique interface.",
        "On top of this, as a bonus, typescript allows for easy validation for props through its strict adherence to types.",
      ].join(" "),
    },
    {
      id: "reactJam23_24Winter-point-3",
      title: "Optimized rendering with Pixi.JS",
      content: [
        "Games incorporate several mediums at once, one being the visual aspect.",
        "The visuals not only need to be appealing but also need to represent and showcase vital information of the game to the player.",
        "This means that you can expect to see a large set of unique visual information.",
        "Pixi.JS uses WebGL to optimize the rendering of this visual information making it invaluable to the project.",
        "With Pixi.JS, the project is visually appealing and performant making it a smooth player experience.",
      ].join(" "),
    },
    {
      id: "reactJam23_24Winter-point-4",
      title: "Global state management with Jotai",
      content: [
        "The game needs to keep track of items that the player interacts with.",
        "Many items/events are tracked from what the player is looking at, like the start screen or the pause screen.",
        "To the income and costs that the player is willing to take on.",
        "Jotai is utilized for this as it allows for global state management similar to React's useState.",
        "This familiarity made it easier to work with because it was intuitive to us.",
      ].join(" "),
    },
    {
      id: "reactJam23_24Winter-point-5",
      title: "Game design",
      content: [
        "The primary focus of my career is learning more about programming.",
        "With that said, in every project I try and learn something new.",
        "Since I'm making a game, I needed to not only exercise good programming fundamentals, but I also needed to study video game design.",
        "To demonstrate why this was necessary, you may be familiar with games that only ask the player to click on an object forever.",
        "Needless to say, this doesn't ask a lot of attention or focus from the player, this is the reason for studying video game design, how a game makes people feel certain things.",
        "It's not enough to be technically sound, the game also needs to be able to be fun, while requiring the players attention.",
        "Video game design looks at how to do this while making the game a cohesive experience.",
      ].join(" "),
    },
  ],
  techStack: [
    "The tech that can be used is limited by the rules of ReactJam 23/24 Winter, which is to stick strictly to React.JS for development of the game.",
    "So, the game only employs a front-end and attempts to only use React.JS.",
    "Despite this, we used a varied set of tools in order to make the game.",
    "\nThe tech stack is React.JS with Typescript alongside Pixi.JS.",
  ].join(" "),
  techStackList: [
    {
      id: "reactJam23_24Winter-tech-1",
      tech: "Pixi.JS: Optimize 2D visuals through WebGL",
    },
    {
      id: "reactJam23_24Winter-tech-2",
      tech: "React.JS",
    },
    { id: "reactJam23_24Winter-tech-3", tech: "CSS" },
    {
      id: "reactJam23_24Winter-tech-4",
      tech: "Javascript ES6",
    },
    {
      id: "reactJam23_24Winter-tech-5",
      tech: "HTML6",
    },
    {
      id: "reactJam23_24Winter-tech-6",
      tech: "Typescript: Used for its addition of types as well as more traditional forms of interfaces",
    },
    {
      id: "reactJam23_24Winter-tech-7",
      tech: "Jotai: Minimal global state management",
    },
    { id: "reactJam23_24Winter-tech-8", tech: "Jest: For testing" },
    { id: "reactJam23_24Winter-tech-9", tech: "Webpack: Build tool" },
    { id: "reactJam23_24Winter-tech-10", tech: "GitHub: Version control" },
    {
      id: "reactJam23_24Winter-tech-11",
      tech: "Visual Studio Code: Developer environment",
    },
  ],
  architecture: [
    "Pixi allows for optimized visual content, especially important due to the nature of a video game.",
    "\nReact introduces a method to make sections of code into components and also makes those sections reusable.",
    "\nWebpack is a build tool which automates the compilation and bundling of code.",
    "\n\nThis project focuses on a component focused architecture where reusability is the goal for the majority of the codebase.",
    "On top of this the project uses global state management in order to keep track of the games overall status as well as system mechanics found within the game.",
  ].join(" "),
  description: [
    "Alongside a friend, we used React.JS to make a game within 12 days in the event called ReactJam 23/24.",
    "While I worked together with Ryan I was essentially the lead of the project so many of the creative decisions were up to me.",
    "\nThe game is heavily inspired by tycoon type games where the point is to maintain a business and to go broke is to lose the game.",
    "Often times this genre of games pushes this rule into absurd heights.",
    "If the business is a hotel, then you can build the hotel into its thousandth floor.",
    "If the business is an amusement park, then the park can sprawl several football fields.",
    "\nIt's silly and the idea behind our game.",
    "Our game allowed you to expand a business focused on cybernetic prosthetics.",
    "\n\nOne thing you'll notice is that it has little to it, this is in part due to our inexperience and the limited timeline of 12 days.",
    "I prefer to focus on the work we did on the project rather than the result.",
    "It was our first game jam and our first time making a video game.",
    "Due to this, we needed to learn a lot very quickly.",
    "The biggest thing was utilizing graphic resources as best as possible.",
    "\nFor us this meant using Pixi.JS, a renderer that uses WebGL, to create what would be the main scene the player would be interacting with.",
    "\nOn top of Pixi.JS I opted for Typescript for data integrity.",
    "This allowed data to be clear and standardized, considering the type of game we were making, this was a must.",
    "\nThe project also employs Jotai, a minimal state manager, to keep track of the games status in things like the economy of the game.",
    "\nWe also needed to dabble in video game design in order to make the project interesting to make and fun to interact with.",
    "\nWe both learned a lot in this short time; aside from the game, I also got more experience with React.JS.",
    "\n\nBelow is a brief description of most items found within the project",
    "\n\nSystem Mechanic States:",
    "\nThere's state management for every system mechanic that needs to be accessed by other parts of the projects.",
    "This ranges from a list of buildings built, economic factors like the amount of money the player has or the amount of income coming in.",
    "The implementation of these states are more involved than the state themselves.",
    "For example, the gameState checks what screen the player is on, the start, the gameplay screen or the pause screen.",
    "It's pretty simple but it's made complicated when taking into account the several items/events whose state also needs to be managed.",
    "\n\nComponents:",
    "\nThe player is able to create more sections of a building, rooms in that section and hire people to occupy those rooms.",
    "\nBuilding, BuildingSection, People, Room are the relevant components.",
    "\n\nScreens:",
    "\nThese screens represent the main containers that the player will be looking at like the start screen, or a pause screen.",
    "\n\n- StartScreen -",
    "\nThis is the initial screen the player will see, the player will need to press a button to start the game.",
    "\n\n- MainScreen -",
    "\nThis screen will be the main gamplay area so expect things like the previously described components to be seen here.",
    "The start screen leads into the main screen, and from the main screen you should be able to go to the pause screen and end screen.",
    "This screen also holds the UI for the game.",
    "\n\nAs the project grew, and more mechanics got introduced, the organization of the code became more important.",
    "Thankfully, that was something we had planned for at the begining of the project.",
    "\n\n*Project code is up to date on GitHub with some added features while the game on reactJam is out of date as it's a previous version*",
  ].join(" "),
};
